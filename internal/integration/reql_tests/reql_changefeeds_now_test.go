// Code generated by gen_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../template.go.tpl
package reql_tests

import (
	"testing"
	"time"

	"github.com/stretchr/testify/suite"
	r "gopkg.in/rethinkdb/rethinkdb-go.v6"
	"gopkg.in/rethinkdb/rethinkdb-go.v6/internal/compare"
)

// Test that r.now() is allowed before changes(), disallowed after.
func TestChangefeedsNowSuite(t *testing.T) {
	suite.Run(t, new(ChangefeedsNowSuite))
}

type ChangefeedsNowSuite struct {
	suite.Suite

	session *r.Session
}

func (suite *ChangefeedsNowSuite) SetupTest() {
	suite.T().Log("Setting up ChangefeedsNowSuite")
	// Use imports to prevent errors
	_ = time.Time{}
	_ = compare.AnythingIsFine

	session, err := r.Connect(r.ConnectOpts{
		Address: url,
	})
	suite.Require().NoError(err, "Error returned when connecting to server")
	suite.session = session

	r.DBDrop("test").Exec(suite.session)
	err = r.DBCreate("test").Exec(suite.session)
	suite.Require().NoError(err)
	err = r.DB("test").Wait().Exec(suite.session)
	suite.Require().NoError(err)

	r.DB("test").TableDrop("tbl").Exec(suite.session)
	err = r.DB("test").TableCreate("tbl").Exec(suite.session)
	suite.Require().NoError(err)
	err = r.DB("test").Table("tbl").Wait().Exec(suite.session)
	suite.Require().NoError(err)
}

func (suite *ChangefeedsNowSuite) TearDownSuite() {
	suite.T().Log("Tearing down ChangefeedsNowSuite")

	if suite.session != nil {
		r.DB("rethinkdb").Table("_debug_scratch").Delete().Exec(suite.session)
		r.DB("test").TableDrop("tbl").Exec(suite.session)
		r.DBDrop("test").Exec(suite.session)

		suite.session.Close()
	}
}

func (suite *ChangefeedsNowSuite) TestCases() {
	suite.T().Log("Running ChangefeedsNowSuite: Test that r.now() is allowed before changes(), disallowed after.")

	tbl := r.DB("test").Table("tbl")
	_ = tbl // Prevent any noused variable errors

	{
		// changefeeds/now.py_one.yaml line #8
		/* AnythingIsFine */
		var expected_ = compare.AnythingIsFine
		/* tbl.merge({'a': r.now()}).changes() */

		suite.T().Log("About to run line #8: tbl.Merge(map[interface{}]interface{}{'a': r.Now(), }).Changes()")

		runAndAssert(suite.Suite, expected_, tbl.Merge(map[interface{}]interface{}{"a": r.Now()}).Changes(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
			GroupFormat:    "map",
		})
		suite.T().Log("Finished running line #8")
	}
}
