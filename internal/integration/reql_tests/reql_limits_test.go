// Code generated by gen_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../template.go.tpl
package reql_tests

import (
	"testing"
	"time"

	"github.com/stretchr/testify/suite"
	r "gopkg.in/rethinkdb/rethinkdb-go.v6"
	"gopkg.in/rethinkdb/rethinkdb-go.v6/internal/compare"
)

// Tests array limit variations
func TestLimitsSuite(t *testing.T) {
	suite.Run(t, new(LimitsSuite))
}

type LimitsSuite struct {
	suite.Suite

	session *r.Session
}

func (suite *LimitsSuite) SetupTest() {
	suite.T().Log("Setting up LimitsSuite")
	// Use imports to prevent errors
	_ = time.Time{}
	_ = compare.AnythingIsFine

	session, err := r.Connect(r.ConnectOpts{
		Address: url,
	})
	suite.Require().NoError(err, "Error returned when connecting to server")
	suite.session = session

	r.DBDrop("test").Exec(suite.session)
	err = r.DBCreate("test").Exec(suite.session)
	suite.Require().NoError(err)
	err = r.DB("test").Wait().Exec(suite.session)
	suite.Require().NoError(err)

	r.DB("test").TableDrop("tbl").Exec(suite.session)
	err = r.DB("test").TableCreate("tbl").Exec(suite.session)
	suite.Require().NoError(err)
	err = r.DB("test").Table("tbl").Wait().Exec(suite.session)
	suite.Require().NoError(err)
}

func (suite *LimitsSuite) TearDownSuite() {
	suite.T().Log("Tearing down LimitsSuite")

	if suite.session != nil {
		r.DB("rethinkdb").Table("_debug_scratch").Delete().Exec(suite.session)
		r.DB("test").TableDrop("tbl").Exec(suite.session)
		r.DBDrop("test").Exec(suite.session)

		suite.session.Close()
	}
}

func (suite *LimitsSuite) TestCases() {
	suite.T().Log("Running LimitsSuite: Tests array limit variations")

	tbl := r.DB("test").Table("tbl")
	_ = tbl // Prevent any noused variable errors

	{
		// limits.yaml line #6
		/* [1,1,1,1,1,1,1,1] */
		var expected_ = []interface{}{1, 1, 1, 1, 1, 1, 1, 1}
		/* r.expr([1,1,1,1]).union([1, 1, 1, 1]) */

		suite.T().Log("About to run line #6: r.Expr([]interface{}{1, 1, 1, 1}).Union([]interface{}{1, 1, 1, 1})")

		runAndAssert(suite.Suite, expected_, r.Expr([]interface{}{1, 1, 1, 1}).Union([]interface{}{1, 1, 1, 1}), suite.session, r.RunOpts{
			ArrayLimit:     8,
			GeometryFormat: "raw",
			GroupFormat:    "map",
		})
		suite.T().Log("Finished running line #6")
	}

	{
		// limits.yaml line #10
		/* err("ReqlResourceLimitError", "Array over size limit `4`.  To raise the number of allowed elements, modify the `array_limit` option to `.run` (not available in the Data Explorer), or use an index.", [0]) */
		var expected_ = err("ReqlResourceLimitError", "Array over size limit `4`.  To raise the number of allowed elements, modify the `array_limit` option to `.run` (not available in the Data Explorer), or use an index.")
		/* r.expr([1,2,3,4]).union([5, 6, 7, 8]) */

		suite.T().Log("About to run line #10: r.Expr([]interface{}{1, 2, 3, 4}).Union([]interface{}{5, 6, 7, 8})")

		runAndAssert(suite.Suite, expected_, r.Expr([]interface{}{1, 2, 3, 4}).Union([]interface{}{5, 6, 7, 8}), suite.session, r.RunOpts{
			ArrayLimit:     4,
			GeometryFormat: "raw",
			GroupFormat:    "map",
		})
		suite.T().Log("Finished running line #10")
	}

	{
		// limits.yaml line #16
		/* err("ReqlResourceLimitError", "Array over size limit `4`.  To raise the number of allowed elements, modify the `array_limit` option to `.run` (not available in the Data Explorer), or use an index.", [0]) */
		var expected_ = err("ReqlResourceLimitError", "Array over size limit `4`.  To raise the number of allowed elements, modify the `array_limit` option to `.run` (not available in the Data Explorer), or use an index.")
		/* r.expr([1,2,3,4,5,6,7,8]) */

		suite.T().Log("About to run line #16: r.Expr([]interface{}{1, 2, 3, 4, 5, 6, 7, 8})")

		runAndAssert(suite.Suite, expected_, r.Expr([]interface{}{1, 2, 3, 4, 5, 6, 7, 8}), suite.session, r.RunOpts{
			ArrayLimit:     4,
			GeometryFormat: "raw",
			GroupFormat:    "map",
		})
		suite.T().Log("Finished running line #16")
	}

	{
		// limits.yaml line #22
		/* err("ReqlQueryLogicError", "Illegal array size limit `-1`.  (Must be >= 1.)", []) */
		var expected_ = err("ReqlQueryLogicError", "Illegal array size limit `-1`.  (Must be >= 1.)")
		/* r.expr([1,2,3,4,5,6,7,8]) */

		suite.T().Log("About to run line #22: r.Expr([]interface{}{1, 2, 3, 4, 5, 6, 7, 8})")

		runAndAssert(suite.Suite, expected_, r.Expr([]interface{}{1, 2, 3, 4, 5, 6, 7, 8}), suite.session, r.RunOpts{
			ArrayLimit:     -1,
			GeometryFormat: "raw",
			GroupFormat:    "map",
		})
		suite.T().Log("Finished running line #22")
	}

	{
		// limits.yaml line #27
		/* err("ReqlQueryLogicError", "Illegal array size limit `0`.  (Must be >= 1.)", []) */
		var expected_ = err("ReqlQueryLogicError", "Illegal array size limit `0`.  (Must be >= 1.)")
		/* r.expr([1,2,3,4,5,6,7,8]) */

		suite.T().Log("About to run line #27: r.Expr([]interface{}{1, 2, 3, 4, 5, 6, 7, 8})")

		runAndAssert(suite.Suite, expected_, r.Expr([]interface{}{1, 2, 3, 4, 5, 6, 7, 8}), suite.session, r.RunOpts{
			ArrayLimit:     0,
			GeometryFormat: "raw",
			GroupFormat:    "map",
		})
		suite.T().Log("Finished running line #27")
	}

	// limits.yaml line #33
	// ten_l = r.expr([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
	suite.T().Log("Possibly executing: var ten_l r.Term = r.Expr([]interface{}{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})")

	ten_l := r.Expr([]interface{}{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})
	_ = ten_l // Prevent any noused variable errors

	{
		// limits.yaml line #52
		/* (null) */
		var expected_ interface{} = nil
		/* tbl.get(0) */

		suite.T().Log("About to run line #52: tbl.Get(0)")

		runAndAssert(suite.Suite, expected_, tbl.Get(0), suite.session, r.RunOpts{
			ArrayLimit:     100001,
			GeometryFormat: "raw",
			GroupFormat:    "map",
		})
		suite.T().Log("Finished running line #52")
	}

	{
		// limits.yaml line #58
		/* ({'deleted':0,'replaced':0,'unchanged':0,'errors':0,'skipped':0,'inserted':1}) */
		var expected_ = map[interface{}]interface{}{"deleted": 0, "replaced": 0, "unchanged": 0, "errors": 0, "skipped": 0, "inserted": 1}
		/* tbl.insert({'id':1, 'array':ten_l}) */

		suite.T().Log("About to run line #58: tbl.Insert(map[interface{}]interface{}{'id': 1, 'array': ten_l, })")

		runAndAssert(suite.Suite, expected_, tbl.Insert(map[interface{}]interface{}{"id": 1, "array": ten_l}), suite.session, r.RunOpts{
			GeometryFormat: "raw",
			GroupFormat:    "map",
		})
		suite.T().Log("Finished running line #58")
	}

	{
		// limits.yaml line #60
		/* ({'array':[1,2,3,4,5,6,7,8,9,10],'id':1}) */
		var expected_ = map[interface{}]interface{}{"array": []interface{}{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, "id": 1}
		/* tbl.get(1) */

		suite.T().Log("About to run line #60: tbl.Get(1)")

		runAndAssert(suite.Suite, expected_, tbl.Get(1), suite.session, r.RunOpts{
			ArrayLimit:     4,
			GeometryFormat: "raw",
			GroupFormat:    "map",
		})
		suite.T().Log("Finished running line #60")
	}

	{
		// limits.yaml line #67
		/* 1 */
		var expected_ = 1
		/* tbl.delete().get_field('deleted') */

		suite.T().Log("About to run line #67: tbl.Delete().Field('deleted')")

		runAndAssert(suite.Suite, expected_, tbl.Delete().Field("deleted"), suite.session, r.RunOpts{
			GeometryFormat: "raw",
			GroupFormat:    "map",
		})
		suite.T().Log("Finished running line #67")
	}

	// limits.yaml line #71
	// c = tbl.changes(squash=1000000, changefeed_queue_size=10)
	suite.T().Log("Possibly executing: var c r.Term = tbl.Changes().OptArgs(r.ChangesOpts{Squash: 1000000, ChangefeedQueueSize: 10, })")

	c := maybeRun(tbl.Changes().OptArgs(r.ChangesOpts{Squash: 1000000, ChangefeedQueueSize: 10}), suite.session, r.RunOpts{})
	_ = c // Prevent any noused variable errors

	{
		// limits.yaml line #73
		/* 7 */
		var expected_ = 7
		/* tbl.insert([{'id':0}, {'id':1}, {'id':2}, {'id':3}, {'id':4}, {'id':5}, {'id':6}]).get_field('inserted') */

		suite.T().Log("About to run line #73: tbl.Insert([]interface{}{map[interface{}]interface{}{'id': 0, }, map[interface{}]interface{}{'id': 1, }, map[interface{}]interface{}{'id': 2, }, map[interface{}]interface{}{'id': 3, }, map[interface{}]interface{}{'id': 4, }, map[interface{}]interface{}{'id': 5, }, map[interface{}]interface{}{'id': 6, }}).Field('inserted')")

		runAndAssert(suite.Suite, expected_, tbl.Insert([]interface{}{map[interface{}]interface{}{"id": 0}, map[interface{}]interface{}{"id": 1}, map[interface{}]interface{}{"id": 2}, map[interface{}]interface{}{"id": 3}, map[interface{}]interface{}{"id": 4}, map[interface{}]interface{}{"id": 5}, map[interface{}]interface{}{"id": 6}}).Field("inserted"), suite.session, r.RunOpts{
			GeometryFormat: "raw",
			GroupFormat:    "map",
		})
		suite.T().Log("Finished running line #73")
	}

	{
		// limits.yaml line #85
		/* 7 */
		var expected_ = 7
		/* tbl.insert([{'id':7}, {'id':8}, {'id':9}, {'id':10}, {'id':11}, {'id':12}, {'id':13}]).get_field('inserted') */

		suite.T().Log("About to run line #85: tbl.Insert([]interface{}{map[interface{}]interface{}{'id': 7, }, map[interface{}]interface{}{'id': 8, }, map[interface{}]interface{}{'id': 9, }, map[interface{}]interface{}{'id': 10, }, map[interface{}]interface{}{'id': 11, }, map[interface{}]interface{}{'id': 12, }, map[interface{}]interface{}{'id': 13, }}).Field('inserted')")

		runAndAssert(suite.Suite, expected_, tbl.Insert([]interface{}{map[interface{}]interface{}{"id": 7}, map[interface{}]interface{}{"id": 8}, map[interface{}]interface{}{"id": 9}, map[interface{}]interface{}{"id": 10}, map[interface{}]interface{}{"id": 11}, map[interface{}]interface{}{"id": 12}, map[interface{}]interface{}{"id": 13}}).Field("inserted"), suite.session, r.RunOpts{
			GeometryFormat: "raw",
			GroupFormat:    "map",
		})
		suite.T().Log("Finished running line #85")
	}

	{
		// limits.yaml line #97
		/* 14 */
		var expected_ = 14
		/* tbl.delete().get_field('deleted') */

		suite.T().Log("About to run line #97: tbl.Delete().Field('deleted')")

		runAndAssert(suite.Suite, expected_, tbl.Delete().Field("deleted"), suite.session, r.RunOpts{
			GeometryFormat: "raw",
			GroupFormat:    "map",
		})
		suite.T().Log("Finished running line #97")
	}

	// limits.yaml line #101
	// c2 = tbl.changes(squash=1000000)
	suite.T().Log("Possibly executing: var c2 r.Term = tbl.Changes().OptArgs(r.ChangesOpts{Squash: 1000000, })")

	c2 := maybeRun(tbl.Changes().OptArgs(r.ChangesOpts{Squash: 1000000}), suite.session, r.RunOpts{
		ChangefeedQueueSize: 10,
	})
	_ = c2 // Prevent any noused variable errors

	{
		// limits.yaml line #106
		/* 7 */
		var expected_ = 7
		/* tbl.insert([{'id':0}, {'id':1}, {'id':2}, {'id':3}, {'id':4}, {'id':5}, {'id':6}]).get_field('inserted') */

		suite.T().Log("About to run line #106: tbl.Insert([]interface{}{map[interface{}]interface{}{'id': 0, }, map[interface{}]interface{}{'id': 1, }, map[interface{}]interface{}{'id': 2, }, map[interface{}]interface{}{'id': 3, }, map[interface{}]interface{}{'id': 4, }, map[interface{}]interface{}{'id': 5, }, map[interface{}]interface{}{'id': 6, }}).Field('inserted')")

		runAndAssert(suite.Suite, expected_, tbl.Insert([]interface{}{map[interface{}]interface{}{"id": 0}, map[interface{}]interface{}{"id": 1}, map[interface{}]interface{}{"id": 2}, map[interface{}]interface{}{"id": 3}, map[interface{}]interface{}{"id": 4}, map[interface{}]interface{}{"id": 5}, map[interface{}]interface{}{"id": 6}}).Field("inserted"), suite.session, r.RunOpts{
			GeometryFormat: "raw",
			GroupFormat:    "map",
		})
		suite.T().Log("Finished running line #106")
	}

	{
		// limits.yaml line #118
		/* 7 */
		var expected_ = 7
		/* tbl.insert([{'id':7}, {'id':8}, {'id':9}, {'id':10}, {'id':11}, {'id':12}, {'id':13}]).get_field('inserted') */

		suite.T().Log("About to run line #118: tbl.Insert([]interface{}{map[interface{}]interface{}{'id': 7, }, map[interface{}]interface{}{'id': 8, }, map[interface{}]interface{}{'id': 9, }, map[interface{}]interface{}{'id': 10, }, map[interface{}]interface{}{'id': 11, }, map[interface{}]interface{}{'id': 12, }, map[interface{}]interface{}{'id': 13, }}).Field('inserted')")

		runAndAssert(suite.Suite, expected_, tbl.Insert([]interface{}{map[interface{}]interface{}{"id": 7}, map[interface{}]interface{}{"id": 8}, map[interface{}]interface{}{"id": 9}, map[interface{}]interface{}{"id": 10}, map[interface{}]interface{}{"id": 11}, map[interface{}]interface{}{"id": 12}, map[interface{}]interface{}{"id": 13}}).Field("inserted"), suite.session, r.RunOpts{
			GeometryFormat: "raw",
			GroupFormat:    "map",
		})
		suite.T().Log("Finished running line #118")
	}
}
