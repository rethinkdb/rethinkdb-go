// Code generated by gen_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../template.go.tpl
package reql_tests

import (
	"testing"
	"time"

	"github.com/stretchr/testify/suite"
	r "gopkg.in/rethinkdb/rethinkdb-go.v6"
	"gopkg.in/rethinkdb/rethinkdb-go.v6/internal/compare"
)

// Test changefeed squashing
func TestChangefeedsSquashSuite(t *testing.T) {
	suite.Run(t, new(ChangefeedsSquashSuite))
}

type ChangefeedsSquashSuite struct {
	suite.Suite

	session *r.Session
}

func (suite *ChangefeedsSquashSuite) SetupTest() {
	suite.T().Log("Setting up ChangefeedsSquashSuite")
	// Use imports to prevent errors
	_ = time.Time{}
	_ = compare.AnythingIsFine

	session, err := r.Connect(r.ConnectOpts{
		Address: url,
	})
	suite.Require().NoError(err, "Error returned when connecting to server")
	suite.session = session

	r.DBDrop("test").Exec(suite.session)
	err = r.DBCreate("test").Exec(suite.session)
	suite.Require().NoError(err)
	err = r.DB("test").Wait().Exec(suite.session)
	suite.Require().NoError(err)

	r.DB("test").TableDrop("tbl").Exec(suite.session)
	err = r.DB("test").TableCreate("tbl").Exec(suite.session)
	suite.Require().NoError(err)
	err = r.DB("test").Table("tbl").Wait().Exec(suite.session)
	suite.Require().NoError(err)
}

func (suite *ChangefeedsSquashSuite) TearDownSuite() {
	suite.T().Log("Tearing down ChangefeedsSquashSuite")

	if suite.session != nil {
		r.DB("rethinkdb").Table("_debug_scratch").Delete().Exec(suite.session)
		r.DB("test").TableDrop("tbl").Exec(suite.session)
		r.DBDrop("test").Exec(suite.session)

		suite.session.Close()
	}
}

func (suite *ChangefeedsSquashSuite) TestCases() {
	suite.T().Log("Running ChangefeedsSquashSuite: Test changefeed squashing")

	tbl := r.DB("test").Table("tbl")
	_ = tbl // Prevent any noused variable errors

	{
		// changefeeds/squash.yaml line #7
		/* ("STREAM") */
		var expected_ = "STREAM"
		/* tbl.changes(squash=true).type_of() */

		suite.T().Log("About to run line #7: tbl.Changes().OptArgs(r.ChangesOpts{Squash: true, }).TypeOf()")

		runAndAssert(suite.Suite, expected_, tbl.Changes().OptArgs(r.ChangesOpts{Squash: true}).TypeOf(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
			GroupFormat:    "map",
		})
		suite.T().Log("Finished running line #7")
	}

	// changefeeds/squash.yaml line #14
	// normal_changes = tbl.changes().limit(2)
	suite.T().Log("Possibly executing: var normal_changes r.Term = tbl.Changes().Limit(2)")

	normal_changes := maybeRun(tbl.Changes().Limit(2), suite.session, r.RunOpts{})
	_ = normal_changes // Prevent any noused variable errors

	// changefeeds/squash.yaml line #16
	// false_squash_changes = tbl.changes(squash=False).limit(2)
	suite.T().Log("Possibly executing: var false_squash_changes r.Term = tbl.Changes().OptArgs(r.ChangesOpts{Squash: false, }).Limit(2)")

	false_squash_changes := maybeRun(tbl.Changes().OptArgs(r.ChangesOpts{Squash: false}).Limit(2), suite.session, r.RunOpts{})
	_ = false_squash_changes // Prevent any noused variable errors

	// changefeeds/squash.yaml line #20
	// long_squash_changes = tbl.changes(squash=0.5).limit(1)
	suite.T().Log("Possibly executing: var long_squash_changes r.Term = tbl.Changes().OptArgs(r.ChangesOpts{Squash: 0.5, }).Limit(1)")

	long_squash_changes := maybeRun(tbl.Changes().OptArgs(r.ChangesOpts{Squash: 0.5}).Limit(1), suite.session, r.RunOpts{})
	_ = long_squash_changes // Prevent any noused variable errors

	// changefeeds/squash.yaml line #24
	// squash_changes = tbl.changes(squash=true).limit(1)
	suite.T().Log("Possibly executing: var squash_changes r.Term = tbl.Changes().OptArgs(r.ChangesOpts{Squash: true, }).Limit(1)")

	squash_changes := maybeRun(tbl.Changes().OptArgs(r.ChangesOpts{Squash: true}).Limit(1), suite.session, r.RunOpts{})
	_ = squash_changes // Prevent any noused variable errors

	{
		// changefeeds/squash.yaml line #28
		/* 1 */
		var expected_ = 1
		/* tbl.insert({'id':100})['inserted'] */

		suite.T().Log("About to run line #28: tbl.Insert(map[interface{}]interface{}{'id': 100, }).AtIndex('inserted')")

		runAndAssert(suite.Suite, expected_, tbl.Insert(map[interface{}]interface{}{"id": 100}).AtIndex("inserted"), suite.session, r.RunOpts{
			GeometryFormat: "raw",
			GroupFormat:    "map",
		})
		suite.T().Log("Finished running line #28")
	}

	{
		// changefeeds/squash.yaml line #32
		/* 1 */
		var expected_ = 1
		/* tbl.get(100).update({'a':1})['replaced'] */

		suite.T().Log("About to run line #32: tbl.Get(100).Update(map[interface{}]interface{}{'a': 1, }).AtIndex('replaced')")

		runAndAssert(suite.Suite, expected_, tbl.Get(100).Update(map[interface{}]interface{}{"a": 1}).AtIndex("replaced"), suite.session, r.RunOpts{
			GeometryFormat: "raw",
			GroupFormat:    "map",
		})
		suite.T().Log("Finished running line #32")
	}

	{
		// changefeeds/squash.yaml line #36
		/* ([{'new_val':{'id':100}, 'old_val':null},
		{'new_val':{'a':1, 'id':100}, 'old_val':{'id':100}}]) */
		var expected_ = []interface{}{map[interface{}]interface{}{"new_val": map[interface{}]interface{}{"id": 100}, "old_val": nil}, map[interface{}]interface{}{"new_val": map[interface{}]interface{}{"a": 1, "id": 100}, "old_val": map[interface{}]interface{}{"id": 100}}}
		/* normal_changes */

		suite.T().Log("About to run line #36: normal_changes")

		runAndAssert(suite.Suite, expected_, normal_changes, suite.session, r.RunOpts{
			GeometryFormat: "raw",
			GroupFormat:    "map",
		})
		suite.T().Log("Finished running line #36")
	}

	{
		// changefeeds/squash.yaml line #40
		/* ([{'new_val':{'id':100}, 'old_val':null},
		{'new_val':{'a':1, 'id':100}, 'old_val':{'id':100}}]) */
		var expected_ = []interface{}{map[interface{}]interface{}{"new_val": map[interface{}]interface{}{"id": 100}, "old_val": nil}, map[interface{}]interface{}{"new_val": map[interface{}]interface{}{"a": 1, "id": 100}, "old_val": map[interface{}]interface{}{"id": 100}}}
		/* false_squash_changes */

		suite.T().Log("About to run line #40: false_squash_changes")

		runAndAssert(suite.Suite, expected_, false_squash_changes, suite.session, r.RunOpts{
			GeometryFormat: "raw",
			GroupFormat:    "map",
		})
		suite.T().Log("Finished running line #40")
	}

	{
		// changefeeds/squash.yaml line #44
		/* ([{'new_val':{'a':1, 'id':100}, 'old_val':null}]) */
		var expected_ = []interface{}{map[interface{}]interface{}{"new_val": map[interface{}]interface{}{"a": 1, "id": 100}, "old_val": nil}}
		/* long_squash_changes */

		suite.T().Log("About to run line #44: long_squash_changes")

		runAndAssert(suite.Suite, expected_, long_squash_changes, suite.session, r.RunOpts{
			GeometryFormat: "raw",
			GroupFormat:    "map",
		})
		suite.T().Log("Finished running line #44")
	}

	{
		// changefeeds/squash.yaml line #59
		/* err('ReqlQueryLogicError', 'Expected BOOL or a positive NUMBER but found a negative NUMBER.') */
		var expected_ = err("ReqlQueryLogicError", "Expected BOOL or a positive NUMBER but found a negative NUMBER.")
		/* tbl.changes(squash=-10) */

		suite.T().Log("About to run line #59: tbl.Changes().OptArgs(r.ChangesOpts{Squash: -10, })")

		runAndAssert(suite.Suite, expected_, tbl.Changes().OptArgs(r.ChangesOpts{Squash: -10}), suite.session, r.RunOpts{
			GeometryFormat: "raw",
			GroupFormat:    "map",
		})
		suite.T().Log("Finished running line #59")
	}
}
